name: Deploy API

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: string
        default: 'deploy' # 'deploy' or 'destroy'
      api:
        description: 'API to deploy'
        required: true
        type: choice
        options:
          - flights
          - routes
      namespace:
        description: 'Kubernetes namespace'
        type: string
        default: 'flight-data'

env:
  NAMESPACE: ${{ inputs.namespace }}
  RELEASE_NAME: flight-data-${{ inputs.api }}
  API_FOLDER: ${{ github.workspace }}/apis/${{ inputs.api }}
  CHART_FOLDER: ${{ github.workspace }}/k8s/${{ inputs.api }}
  BUILD_FOLDER: ${{ github.workspace }}/.generated
  KUBECONFIG: /.kube/config

jobs:
  test:
    name: Test API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - uses: kong/setup-inso@v2
        with:
          inso-version: 11.0.2

      - name: Start service
        run: |
          file="server"
          port="8081"

          make run file=${file} port=${port} nohup=true
          echo $! > ./${file}.pid

          sleep 2
        working-directory: ${{ env.API_FOLDER }}

      - name: Export Spec
        run: |
          SPEC_ID=$(yq eval '.spec.meta.id' ${{ env.API_FOLDER }}/insomnia.yaml)
          inso export spec $SPEC_ID -w ${{ env.API_FOLDER }}/insomnia.yaml -o ${{ env.BUILD_FOLDER }}/oas.yaml
          
          # Run unit tests
          # inso --ci run test $SPEC_ID -e local -w ${{ env.API_FOLDER }}/insomnia.yaml --verbose --reporter progress

      - name: Run Contract Tests
        uses: schemathesis/action@v1
        with:
          schema: ${{ env.BUILD_FOLDER }}/oas.yaml
          base-url: http://localhost:8081
          args: '--experimental openapi-3.1 --exclude-checks=ignored_auth'

  deploy-api:
    name: Deploy API
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: kubectl use context
        run: |
          kubectl config use-context ${{ secrets.KUBE_CONTEXT }}

      - name: Create namespace if not exists
        if: ${{ inputs.action == 'deploy' }}
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy APIs
        if: ${{ inputs.action == 'deploy' }}
        run: |
          helm upgrade --install $RELEASE_NAME . \
            -n $NAMESPACE \
            -f values.yaml \
            --set releaseName=$RELEASE_NAME
        working-directory: ${{ env.CHART_FOLDER }}

      - name: Destroy Example API
        if: ${{ inputs.action == 'destroy' }}
        run: |
          helm uninstall $RELEASE_NAME -n $NAMESPACE --ignore-not-found=true
        working-directory: ${{ env.CHART_FOLDER }}

      - name: Cleanup namespace
        if: ${{ inputs.action == 'destroy' }}
        run: |
          kubectl delete namespace $NAMESPACE --ignore-not-found=true