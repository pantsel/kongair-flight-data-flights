name: Promote API

on:
  workflow_dispatch:
    inputs:
      api_folder:
        description: "Path to the API folder"
        type: string
        required: true
      inso_workspace:
        description: "Path to the inso workspace file"
        type: string
        required: true
      environment:
        description: "Environment to deploy to"
        type: choice
        default: "dev"
        options:
          - "dev"
          - "tst"
          - "acc"
          - "prd"
      gateway_url:
        description: "Kong Gateway URL"
        type: string
        required: true
        default: http://localhost

env:
  KONNECT_SERVER_URL: https://eu.api.konghq.com
  ENV_FILE: .github/env/${{ inputs.environment }}.yaml
  API_FOLDER: ${{ github.workspace }}/${{ inputs.api_folder }}
  # API_SPEC: ${{ github.workspace }}/${{ inputs.api_folder }}/openapi.yaml
  API_PLUGINS_FOLDER: ${{ github.workspace }}/${{ inputs.api_folder }}/kong/plugins
  API_PATCHES_FOLDER: ${{ github.workspace }}/${{ inputs.api_folder }}/kong/patches
  # PLATFORM_FOLDER: ${{ github.workspace }}/examples/apiops/platform
  BUILD_FOLDER: ${{ github.workspace }}/examples/apiops/.generated
  # TEAMS_REGISTRY: ${{ github.workspace }}/examples/apiops/platform/teams.yaml
  DECK_CONFIG_OIDC_ISSUER: ${{ secrets.OIDC_ISSUER }} # To be used in the OIDC plugin template

jobs:

  # Run contract testing with SchemaThesis.
  # The tests are based on the OpenAPI specifications of the services.
  contract-test:
    name: Contract testing
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24
      - uses: kong/setup-inso@v2
        with:
          inso-version: 11.0.2

      - name: Start service
        run: |
          file="server"
          port="8081"

          make run file=${file} port=${port} nohup=true
          echo $! > ./${file}.pid

          sleep 2
        working-directory: ${{ env.API_FOLDER }}

      - name: Export Spec and Run Tests
        run: |
          SPEC_ID=$(yq eval '.spec.meta.id' ${{ inputs.inso_workspace }})
          inso export spec $SPEC_ID -w ${{ inputs.inso_workspace }} -o ${{ env.BUILD_FOLDER }}/oas.yaml
          
          # Run unit tests
          inso --ci run test $SPEC_ID -e local -w ${{ inputs.inso_workspace }} --verbose

      - name: Contract testing flights
        uses: schemathesis/action@v1
        with:
          schema: ${{ env.BUILD_FOLDER }}/oas.yaml
          base-url: http://localhost:8081
          args: '--experimental openapi-3.1 --exclude-checks=ignored_auth'
  
  build:
    runs-on: ubuntu-latest
    needs: contract-test
    name: Build Config
    environment: ${{ inputs.environment }}
    outputs:
      api_name: ${{ steps.deck-vars.outputs.api_name }}
      api_version: ${{ steps.deck-vars.outputs.api_version }}
      api_major_version: ${{ steps.deck-vars.outputs.api_major_version }}
      api_namespace: ${{ steps.deck-vars.outputs.api_namespace }}
      team_name: ${{ steps.deck-vars.outputs.team_name }}
      control_plane_name: ${{ steps.deck-vars.outputs.control_plane_name }}
      system_account: ${{ steps.deck-vars.outputs.system_account }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: kong/setup-deck@v1
        with:
          version: latest

      - uses: kong/setup-inso@v2
        with:
          inso-version: 11.0.2

      - name: Setup decK variables
        id: deck-vars
        run: |

          # Export the OpenAPI spec and store it in a variable
          # This is used to set the API name, version, and other variables as well as the OAS Validation plugin.
          SPEC_ID=$(yq eval '.spec.meta.id' ${{ inputs.inso_workspace }})
          inso export spec $SPEC_ID -w ${{ inputs.inso_workspace }} -o ${{ env.BUILD_FOLDER }}/oas.yaml
          
          api_name=$(yq eval '.info.title' ${{ env.BUILD_FOLDER }}/oas.yaml | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
          api_version=$(yq eval '.info.version' ${{ env.BUILD_FOLDER }}/oas.yaml)
          major_version=$(echo $api_version | cut -d '.' -f 1)
          team_name="flight-data"
          control_plane_name="${team_name}-cp"
          system_account="sa-${control_plane_name}-admin"

          # Set environment variables to be used in the deck commands and followup steps
          echo "DECK_API_NAME=$api_name" >> $GITHUB_ENV
          echo "DECK_API_VERSION=$api_version" >> $GITHUB_ENV
          echo "DECK_API_MAJOR_VERSION=v$major_version" >> $GITHUB_ENV
          echo "DECK_TEAM_NAME=$team_name" >> $GITHUB_ENV
          echo "DECK_CONFIG_NAMESPACE_PATH_PREFIX=/$api_name" >> $GITHUB_ENV
          echo "CONTROL_PLANE_NAME=$control_plane_name" >> $GITHUB_ENV
          echo "SYSTEM_ACCOUNT=$system_account" >> $GITHUB_ENV

          # Set the job outputs to be used in the deploy job
          echo "api_name=$api_name" >> $GITHUB_OUTPUT
          echo "api_major_version=v$major_version" >> $GITHUB_OUTPUT
          echo "api_namespace=/$api_name" >> $GITHUB_OUTPUT
          echo "team_name=$team_name" >> $GITHUB_OUTPUT
          echo "control_plane_name=$control_plane_name" >> $GITHUB_OUTPUT
          echo "system_account=$system_account" >> $GITHUB_OUTPUT

      # This step is only pertinent if you are using OAS Validation plugin
      - name: Read OAS into an environment variable
        id: oas-to-env
        run: |
          # Read the YAML file and convert to JSON string to be used with the OAS Validation plugin down the line.
          # The plugin expects the OAS as a JSON string in an environment variable.
          # https://docs.konghq.com/hub/kong-inc/oas-validation/configuration/#config-api_spec
          
          oas_json=$(yq eval -o=json ${{ env.BUILD_FOLDER }}/oas.yaml | jq -c .)

          # Set as env variable
          echo "DECK_CONFIG_API_SPEC=${oas_json}" >> $GITHUB_ENV

      - name: Lint OpenAPI Spec
        shell: bash
        run: |
          SPEC_ID=$(yq eval '.spec.meta.id' ${{ inputs.inso_workspace }})
          inso lint spec $SPEC_ID -w ${{ inputs.inso_workspace }} --verbose
          inso export spec $SPEC_ID -w ${{ inputs.inso_workspace }} -o ${{ env.BUILD_FOLDER }}/oas.yaml

      - name: Convert OAS to Kong
        run: cat oas.yaml | deck file openapi2kong > $BUILD_FOLDER/kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Add plugins
        run: |
          cat kong.yaml | deck file add-plugins $API_PLUGINS_FOLDER/*.yaml -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Apply patches
        run: |
          cat kong.yaml | deck file patch \
            $API_PATCHES_FOLDER/*.yaml -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Add namespace
        run: cat kong.yaml | deck file namespace --path-prefix=$DECK_CONFIG_NAMESPACE_PATH_PREFIX -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

  #     - name: Add Platform level plugins
  #       run: |
  #         cat kong.yaml | deck file add-plugins \
  #           $PLATFORM_FOLDER/kong/plugins/*.yaml -o kong.yaml
  #       working-directory: ${{ env.BUILD_FOLDER }}

  #     - name: Apply Platform level patches
  #       run: |
  #         cat kong.yaml | deck file patch \
  #           $PLATFORM_FOLDER/kong/patches/*.yaml -o kong.yaml
  #       working-directory: ${{ env.BUILD_FOLDER }}

      - name: Add Tags
        shell: bash
        run: |
          cat kong.yaml | deck file add-tags $DECK_TEAM_NAME $DECK_API_NAME $DECK_API_MAJOR_VERSION -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Render Config
        run: |
          deck file render --populate-env-vars kong.yaml \
            -o kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      # - name: Lint Config
      #   run: deck file lint -s kong.yaml ${{ env.PLATFORM_FOLDER }}/kong.ruleset.yaml;
      #   working-directory: ${{ env.BUILD_FOLDER }}

      - name: Debug Config
        run: cat kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Validate Config
        run: deck file validate kong.yaml
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Diff Config
        run: |
          deck gateway diff kong.yaml  \
            --select-tag $DECK_API_NAME \
            --select-tag $DECK_API_MAJOR_VERSION \
            --select-tag generated_by:deck \
            --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
            --konnect-token="${{ secrets.KONNECT_PAT }}" \
            --konnect-control-plane-name="${{ env.CONTROL_PLANE_NAME }}" > kong_diff.txt
        working-directory: ${{ env.BUILD_FOLDER }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: config
          path: |
            ${{ env.BUILD_FOLDER }}/kong.yaml
            ${{ env.BUILD_FOLDER }}/kong_diff.txt

  deploy:
      name: Deploy Config
      runs-on: ubuntu-latest
      needs: build
      environment: ${{ inputs.environment }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - uses: kong/setup-deck@v1

        - name: Download Artifacts
          uses: actions/download-artifact@v4
          with:
            name: config
            path: ${{ env.BUILD_FOLDER }}

        - name: Get Control Plane Backup
          run: |
            deck gateway dump \
              --yes \
              --with-id \
              --select-tag generated_by:deck \
              --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
              --konnect-token="${{ secrets.KONNECT_PAT }}" \
              --konnect-control-plane-name="${{ needs.build.outputs.control_plane_name }}" -o kong_backup.yaml
          working-directory: ${{ env.BUILD_FOLDER }}
    
        - name: Sync Config
          id: sync
          run: |
            deck gateway sync kong.yaml  \
              --select-tag ${{ needs.build.outputs.api_name }} \
              --select-tag ${{ needs.build.outputs.api_major_version }} \
              --select-tag generated_by:deck \
              --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
              --konnect-token="${{ secrets.KONNECT_PAT }}" \
              --konnect-control-plane-name="${{ needs.build.outputs.control_plane_name }}"
          working-directory: ${{ env.BUILD_FOLDER }}
          continue-on-error: true

        # https://github.com/schemathesis/schemathesis
        # - name: Run Contract Tests Against the Gateway
        #   uses: schemathesis/action@v1
        #   if: steps.sync.outcome == 'success'
        #   id: tests
        #   with:
        #     schema: ${{ env.API_SPEC}}
        #     base-url: ${{ inputs.gateway_url }}${{ needs.build.outputs.api_namespace }}
        #     checks: all
        #     args: '--auth ${{ secrets.OIDC_CLIENT_ID }}:${{ secrets.OIDC_CLIENT_SECRET }} --experimental openapi-3.1 --method=GET'
        #   continue-on-error: true

        # - name: Rollback Config
        #   if: steps.tests.outcome == 'failure' || steps.sync.outcome == 'failure'
        #   run: |
        #     echo "Tests failed. Rolling back configuration..."
        #     deck gateway sync kong_backup.yaml  \
        #       --select-tag generated_by:deck \
        #       --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
        #       --konnect-token="${{ secrets.KONNECT_PAT }}" \
        #       --konnect-control-plane-name="${{ needs.build.outputs.control_plane_name }}"
        #   working-directory: ${{ env.BUILD_FOLDER }}

        # - name: Get a fresh backup
        #   if: steps.tests.outcome == 'success' || steps.sync.outcome == 'skipped'
        #   run: |
        #     deck gateway dump \
        #       --yes \
        #       --with-id \
        #       --select-tag generated_by:deck \
        #       --konnect-addr="${{ env.KONNECT_SERVER_URL }}" \
        #       --konnect-token="${{ secrets.KONNECT_PAT }}" \
        #       --konnect-control-plane-name="${{ needs.build.outputs.control_plane_name }}" -o kong_backup.yaml
        #   working-directory: ${{ env.BUILD_FOLDER }}

        # - name: Archive artifacts
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: artifacts
        #     path: |
        #       ${{ env.BUILD_FOLDER }}/kong_backup.yaml
        #       ${{ env.BUILD_FOLDER }}/kong.yaml
